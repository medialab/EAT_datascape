/** * timeliner * usage:	var tt = new TimelineGrid({		dates:{			min:$.datepicker.parseDate( "dd.mm.yy", '{% if start_zoom %}{{start_zoom|date:"d.m.Y"}}{% else %}{{min_date|date:"d.m.Y"}}{%endif%}' ) ,			max:$.datepicker.parseDate( "dd.mm.yy", '{% if end_zoom %}{{end_zoom|date:"d.m.Y"}}{% else %}{{max_date|date:"d.m.Y"}}{%endif%}' ) 		},		target: $("#time_points")	});	where time_points is	<div id="time_points"></div>	and it will contain	.time_point{		border-left:1px solid $light_grey_blue;		color:$light_grey_blue;		padding:4px;		position:absolute;		bottom:0px;		font-size:10px;	}	.time_point_last{		overflow:visible;		width: 100px;	} */var TimelineGrid = function( options ){	var $this = this;		this.settings ={		dates:{			min:new Date(1960,1,1),			max:new Date(1960,9,18),			mint:0, // min in milliseconds, leave default			maxt:0, // idem, leave default			dt:0		},		availableWidth: 758,		target: null,		monthsLimit:65,		pointer:{			tag: "<div />",			atts:{				"class":"time_point"			}				}	}		/** week in milliseconds */	var week = 1000 * 60 * 60 * 24 * 7;		/** time difference between dates, in months or years */	this.dt = {"weeks":0, "months":0, "years":0};	/**	 * class inititlization. all funcion are loaded properly.	 * takes given options as parameter	 */	this.init = function( options ){		console.log( "-- timegrid.init()");		$.extend( $this.settings, options );		$.extend( $this.dt, computatedt( $this.settings.dates.max, $this.settings.dates.min ) );				if( $this.settings.target == null ){			alert( "problem in your timeline.. please refresh the page, the desired container id was not found");			return;		}				// computate $this.settings.dates.dt		$this.settings.dates.mint = $this.settings.dates.min.getTime();		$this.settings.dates.maxt =  $this.settings.dates.max.getTime();		$this.settings.dates.dt = $this.settings.dates.maxt - $this.settings.dates.mint;				var _d = new Date();		_d.setTime( $this.settings.dates.min.getTime() );		$this.dt.timestamps = {};		if( $this.dt.weeks < 50 ){			console.log( "less than 50 weeks...month by month");			// months by months						// add months by months			$this.dt.timestamps = {};			while( _d.getTime() < $this.settings.dates.maxt ){				_d.setMonth( _d.getMonth() + 1, 1 );				_d.setHours(0, 0, 0, 0);				if( _d.getTime() > $this.settings.dates.maxt ){					break;				}				$this.dt.timestamps[ $.datepicker.formatDate('M yy',_d) ] = _d.getTime();			}			console.log( _d, $this.dt.timestamps );		} else if( $this.dt.weeks < 100 ){			// every three months			$this.dt.timestamps = {};			while( _d.getTime() < $this.settings.dates.maxt ){				_d.setMonth( _d.getMonth() + 3, 1 );				_d.setHours(0, 0, 0, 0);				if( _d.getTime() > $this.settings.dates.maxt ){					break;				}				$this.dt.timestamps[ $.datepicker.formatDate('M yy',_d) ] = _d.getTime();			}			console.log( _d, $this.dt.timestamps );		} else if( $this.dt.weeks < 1000 ) {			console.log( "less than 100 weeks...years is better now");						while( _d.getTime() < $this.settings.dates.maxt ){				_d.setFullYear( _d.getFullYear() + 1, 0, 1 );				_d.setHours(0, 0, 0, 0);				if( _d.getTime() > $this.settings.dates.maxt ){					break;				}				$this.dt.timestamps[ _d.getFullYear() + "" ] = _d.getTime();			}		} else {			while( _d.getTime() < $this.settings.dates.maxt ){				_d.setFullYear( _d.getFullYear() + 5, 0, 1 );				_d.setHours(0, 0, 0, 0);				if( _d.getTime() > $this.settings.dates.maxt ){					break;				}				$this.dt.timestamps[ _d.getFullYear() + "" ] = _d.getTime();			}		}		// having this times		$this.settings.target.empty();		var utmostPointer = null;		for( i in $this.dt.timestamps ){			var pointer = $( $this.settings.pointer.tag, $this.settings.pointer.atts ).				css("left",	$this.ratio( $this.dt.timestamps[i] - $this.settings.dates.mint, $this.settings.dates.dt, 100 ) +"%").				text( i );			this.append(				pointer			)			if( utmostPointer == null || $this.dt.timestamps[i] > utmostPointer.timestamp ){				utmostPointer = pointer;				utmostPointer.timestamp =  $this.dt.timestamps[i];			} 											}		if( utmostPointer != null ){			utmostPointer.addClass("time_point_last");		}	}				/**	 * @param v1 the known value	 * @param r1 the value range	 * @param r2 the unkown value range	 * @return the value v2 inside range r2	 */	this.ratio = function( v1, r1, r2 ){		return  v1 * r2 / r1;	} 			function computatedt( date1, date2 ){		var diff = new Date();		diff.setTime(Math.abs(date1.getTime() - date2.getTime()));				var dt = { "ms": diff.getTime() };						dt.weeks  =  Math.floor( dt.ms / (1000 * 60 * 60 * 24 * 7));		dt.ms    -=  dt.weeks * (1000 * 60 * 60 * 24 * 7);		dt.days   =  Math.floor( dt.ms / (1000 * 60 * 60 * 24)); 		dt.ms    -=  dt.days * (1000 * 60 * 60 * 24);		dt.hours  =  Math.floor( dt.ms / (1000 * 60 * 60)); 		dt.ms    -=  dt.hours * (1000 * 60 * 60);		dt.mins   =  Math.floor(dt.ms / (1000 * 60)); 		dt.ms    -=  dt.mins * (1000 * 60);		return dt;	}		this.init( options );};